# - name: Print all available facts
#   ansible.builtin.debug:
#     var: ansible_facts

- name: configuration mongo
  tags: mongo,auth,key
  template:
    src: config.j2
    dest: /etc/mongod.conf

- name: configuration mongosrouter
  tags: mongo,auth,key
  template:
    src: mongosconf.j2
    dest: /etc/mongosrouter.conf


- name: change cluster servermode
  lineinfile:
    path: /etc/mongod.conf
    regexp: '^#sharding:'
    line: "sharding:"
- name: add shard to cluster servermode
  lineinfile:
    path: /etc/mongod.conf
    regexp: '^#\s*clusterRole:'
    line: "  clusterRole: {{ shardmode }}"
- name: start mongo server
  service: name=mongod state=restarted enabled=true


- name: configuration mongos.service
  tags: mongo,auth,key
  template:
    src: mongos.service.j2
    dest: /etc/systemd/system/mongos.service

- name: start mongo server
  service: name=mongos state=started enabled=true daemon_reload=true

- name: Wait for seconds
  ansible.builtin.pause:
    seconds: 3


- name: add replicas to servers
  community.mongodb.mongodb_shell:
    login_host: "{{ ansible_host }}"
    login_port: "{{ server_port }}"
    db: "admin"
    eval: "rs.initiate( { _id: \"{{confreplsetname }}\",  configsvr: true,members: [ { _id: 0, host: \"{{ bindip }}:{{ server_port }}\" } ] } )"

# - name: Ensure replicaset exists(shard)
#   vars:
#     confreplica_members: |
#       [
#         {% for host in groups['sharddb_servers'] %}
#           { "host": "{{ hostvars[host].ansible_host }}:{{ server_port }}" }{% if not loop.last %},{% endif %}
#         {% endfor %}
#       ]
#   community.mongodb.mongodb_replicaset:
#     login_host: "{{ ansible_host }}"
#     login_port: "{{ server_port }}"
#     replica_set: "{{confreplsetname }}"
#     members:  "{{ confreplica_members }}"
#   when: inventory_hostname == groups['sharddb_servers'][0]



- name: Wait for seconds
  ansible.builtin.pause:
    seconds: 3

# - name: add shard nodes
#   community.mongodb.mongodb_shell:
#     login_host: "{{ ansible_host }}"
#     login_port: "{{ mongosport }}"
#     db: "admin"
#     eval: "sh.addShard(\"{{replsetname}}/172.16.2.135:{{sharddb_port}},172.16.2.136:{{sharddb_port}},172.16.2.137:{{sharddb_port}}\")"


- name: Add a replicaset shard
  vars:
    shard_members: "{{ groups['repdb_servers'] | map('extract', hostvars, 'ansible_host') | map('regex_replace', '(.*)', '\\1:' ~ mongo_port) | list }}"
    shard_connection_string: "{{replsetname}}/{{ shard_members | join(',') }}"
  community.mongodb.mongodb_shard:
    login_host: "{{ ansible_host }}"
    login_port: "{{ mongosport }}"
    shard:  "{{ shard_connection_string }}"
    state: present